// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MillionLuxury.RealEstate.Infrastructure.Persistence.Databases;

#nullable disable

namespace MillionLuxury.RealEstate.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    partial class RealEstateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Owner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = "1980-05-15",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = "1975-10-30",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CodeInternal")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeInternal");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Price");

                    b.HasIndex("Year");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeInternal = 1001,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Luxury Downtown Penthouse",
                            OwnerId = 1,
                            Price = 2500000.00m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            CodeInternal = 1002,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Modern Family Villa",
                            OwnerId = 1,
                            Price = 1850000.00m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 3,
                            CodeInternal = 1003,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Beachfront Condo",
                            OwnerId = 2,
                            Price = 1200000.00m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 4,
                            CodeInternal = 1004,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Historic Mansion",
                            OwnerId = 2,
                            Price = 4200000.00m,
                            Year = 1895
                        },
                        new
                        {
                            Id = 5,
                            CodeInternal = 1005,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Contemporary Loft",
                            OwnerId = 1,
                            Price = 975000.00m,
                            Year = 2022
                        },
                        new
                        {
                            Id = 6,
                            CodeInternal = 1006,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Suburban Estate",
                            OwnerId = 2,
                            Price = 3100000.00m,
                            Year = 2018
                        },
                        new
                        {
                            Id = 7,
                            CodeInternal = 1007,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Urban Studio Apartment",
                            OwnerId = 1,
                            Price = 450000.00m,
                            Year = 2023
                        },
                        new
                        {
                            Id = 8,
                            CodeInternal = 1008,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mountain Retreat Cabin",
                            OwnerId = 2,
                            Price = 875000.00m,
                            Year = 2017
                        },
                        new
                        {
                            Id = 9,
                            CodeInternal = 1009,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Waterfront Townhouse",
                            OwnerId = 1,
                            Price = 1650000.00m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 10,
                            CodeInternal = 1010,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "DataSeed",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Garden View Cottage",
                            OwnerId = 2,
                            Price = 720000.00m,
                            Year = 2016
                        });
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId", "Enabled");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.PropertyTrace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyTrace");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.Owner", b =>
                {
                    b.OwnsOne("MillionLuxury.RealEstate.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OwnerId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("int");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owner");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");

                            b1.HasData(
                                new
                                {
                                    OwnerId = 1,
                                    City = "Anytown",
                                    Country = "USA",
                                    Street = "123 Main St",
                                    ZipCode = 12345
                                },
                                new
                                {
                                    OwnerId = 2,
                                    City = "Othertown",
                                    Country = "USA",
                                    Street = "456 Oak Ave",
                                    ZipCode = 67890
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.Property", b =>
                {
                    b.HasOne("MillionLuxury.RealEstate.Domain.Entities.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MillionLuxury.RealEstate.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("int");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Property");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");

                            b1.HasData(
                                new
                                {
                                    PropertyId = 1,
                                    City = "New York",
                                    Country = "USA",
                                    Street = "500 Park Avenue",
                                    ZipCode = 10022
                                },
                                new
                                {
                                    PropertyId = 2,
                                    City = "Beverly Hills",
                                    Country = "USA",
                                    Street = "1234 Maple Drive",
                                    ZipCode = 90210
                                },
                                new
                                {
                                    PropertyId = 3,
                                    City = "Miami",
                                    Country = "USA",
                                    Street = "789 Ocean Boulevard",
                                    ZipCode = 33139
                                },
                                new
                                {
                                    PropertyId = 4,
                                    City = "Boston",
                                    Country = "USA",
                                    Street = "42 Historic Lane",
                                    ZipCode = 2108
                                },
                                new
                                {
                                    PropertyId = 5,
                                    City = "Seattle",
                                    Country = "USA",
                                    Street = "888 Industrial Way",
                                    ZipCode = 98101
                                },
                                new
                                {
                                    PropertyId = 6,
                                    City = "Atlanta",
                                    Country = "USA",
                                    Street = "1500 Country Club Road",
                                    ZipCode = 30309
                                },
                                new
                                {
                                    PropertyId = 7,
                                    City = "Chicago",
                                    Country = "USA",
                                    Street = "101 Downtown Street",
                                    ZipCode = 60601
                                },
                                new
                                {
                                    PropertyId = 8,
                                    City = "Denver",
                                    Country = "USA",
                                    Street = "2000 Mountain View Drive",
                                    ZipCode = 80202
                                },
                                new
                                {
                                    PropertyId = 9,
                                    City = "San Francisco",
                                    Country = "USA",
                                    Street = "75 Harbor Front",
                                    ZipCode = 94105
                                },
                                new
                                {
                                    PropertyId = 10,
                                    City = "Portland",
                                    Country = "USA",
                                    Street = "350 Garden Lane",
                                    ZipCode = 97201
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.PropertyImage", b =>
                {
                    b.HasOne("MillionLuxury.RealEstate.Domain.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.PropertyTrace", b =>
                {
                    b.HasOne("MillionLuxury.RealEstate.Domain.Entities.Property", "Property")
                        .WithMany("Traces")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("MillionLuxury.RealEstate.Domain.Entities.Property", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Traces");
                });
#pragma warning restore 612, 618
        }
    }
}
